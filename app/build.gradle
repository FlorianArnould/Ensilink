plugins {
    id "org.sonarqube" version "2.2.1"
}

apply plugin: 'com.android.application'

apply plugin: 'jacoco'

def ApplicationId = "fr.ensicaen.lbssc.ensilink"
def ApplicationVersion = "1.1"
//noinspection GroovyMissingReturnStatement
android {
    compileSdkVersion 26
    buildToolsVersion '26.0.1'
    defaultConfig {
        applicationId ApplicationId
        minSdkVersion 17
        targetSdkVersion 26
        versionCode 3
        versionName ApplicationVersion
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    packagingOptions {
        pickFirst 'META-INF/LICENSE.txt' // picks the JavaMail license file
        exclude 'META-INF/hk2-locator/default'
        exclude 'META-INF/mailcap'
    }
}


repositories {
    jcenter()
    maven {
        url "https://maven.java.net/content/groups/public/"
    }
    maven {
        url 'https://maven.google.com'
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestCompile('com.android.support.test.espresso:espresso-contrib:2.2.2', {
        exclude group: 'com.android.support'
    })
    androidTestCompile('com.android.support.test.espresso:espresso-intents:3.0.1', {
        exclude group: 'com.android.support'
    })
    compile 'com.android.support:appcompat-v7:26.0.2'
    compile 'com.android.support:design:26.0.2'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.sun.mail:android-mail:1.5.5'
    compile 'com.sun.mail:android-activation:1.5.5'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.8'
    testCompile 'org.powermock:powermock:1.6.6'
    testCompile 'org.powermock:powermock-module-junit4:1.6.6'
    testCompile 'org.powermock:powermock-api-mockito:1.6.6'
    androidTestCompile 'org.mockito:mockito-core:2.2.29'
    androidTestCompile 'com.linkedin.dexmaker:dexmaker-mockito:2.2.0'
}

sonarqube {
    properties {
        property "sonar.projectName", "Ensilink"
        property "sonar.projectKey", ApplicationId
        property "sonar.projectVersion", ApplicationVersion
        property "sonar.sources", "src/main/java"
        property "sonar.language", "java"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.jacoco.reportPath", "build/jacoco/testDebugUnitTest.exec"
        property "sonar.jacoco.itReportPath", fileTree(dir: project.buildDir, includes: ['**/*.ec'])
        property "sonar.junit.reportsPath", "build/test-results/debug"
    }
}

jacoco {
    version "0.7.1.201405082137"
}

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true
        html.enabled = true
    }
    classDirectories = fileTree(
            dir: 'build/intermediates/classes/debug/fr/socket/flo/todo',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/BuildConfig.*',
                       '**/Manifest*.*'])
    sourceDirectories = files('src/main/java')
    executionData = files('build/jacoco/testDebugUnitTest.exec')
    doFirst {
        files('build/intermediates/classes/debug').getFiles().each { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}

task jacocoTestAllReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}